<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leehao&#39;s blog</title>
  
  <subtitle>只有永远躺在泥坑里的人,才不会再掉进坑里. ——G.W.F. Hegel</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-12T01:30:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leehao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CasperJS 技术笔记</title>
    <link href="http://yoursite.com/2017/02/03/CasperJS/"/>
    <id>http://yoursite.com/2017/02/03/CasperJS/</id>
    <published>2017-02-03T05:28:58.000Z</published>
    <updated>2017-03-12T01:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="爬虫-amp-amp-前端页面自动化检测"><a href="#爬虫-amp-amp-前端页面自动化检测" class="headerlink" title="爬虫 &amp;&amp; 前端页面自动化检测"></a>爬虫 &amp;&amp; 前端页面自动化检测</h3><ol><li>在日常开发中，项目过于庞大，比如修改某个变量（例如 LESS），就可能会引起其他页面的显示异常</li><li>如果交给测试的伙伴进行测试也比较耗时，所以利用自动化检测工具让开发人员写好测试脚本进行自测，可以提高排错效率，有可以及时发现问题。</li><li>缺点就是脚本需要开发人员自己写…，可能会加大开发成本。</li></ol><p>PhantomJS 可以模拟浏览器（V8引擎），发出一些请求或者模拟用户实现事件操作。</p><p>CasperJS 是对 PhantomJS 的封装，API 更加简洁。</p><p>有了模拟浏览器的功能可以实现前端页面自动化测试与爬虫统计。</p><p>通过自动填写表单，发出登陆请求，可以进行爬虫。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方文档：<a href="http://casperjs.org/" target="_blank" rel="external">http://casperjs.org/</a></p><ol><li>github 上 clone 就好了</li><li>Casper/bin 添加到环境变量</li><li>依赖 ruby，记得提前安装</li></ol><hr><h3 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h3><ol><li>如何进行自动化测试</li><li>对于异步请求如何获取动态创建的 DOM 元素</li><li>关于集成</li></ol><hr><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create(&#123;</div><div class="line">    onWaitTimeout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 页面无响应保存截图</span></div><div class="line">        <span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">        <span class="keyword">this</span>.capture(timestamp + <span class="string">".png"</span>);</div><div class="line">        <span class="keyword">this</span>.echo(<span class="string">'ERROR：以上操作，网速延迟或加载错误，快照保存至。'</span> + timestamp + <span class="string">'.jpg'</span>);</div><div class="line">    &#125;,</div><div class="line">    logLevel: <span class="string">'debug'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 超时等待时间</span></div><div class="line">casper.options.waitTimeout = <span class="number">15000</span>;</div><div class="line"></div><div class="line"><span class="comment">// 输出浏览器控制台错误</span></div><div class="line">casper.on(<span class="string">'page.error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.echo(<span class="string">'浏览器控制台错误信息: '</span> + msg);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 监听页面 404</span></div><div class="line">casper.on(<span class="string">'http.status.404'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resource</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.log(<span class="string">'Hey, this one is 404: '</span> + resource.url, <span class="string">'warning'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 监听页面 500</span></div><div class="line">casper.on(<span class="string">'http.status.500'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resource</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.log(<span class="string">'Hey, this one is 404: '</span> + resource.url, <span class="string">'warning'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// http://XXXXXX/</span></div><div class="line">casper.start(<span class="string">'http://XXXXXX/'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 结构跳转测试</span></div><div class="line">casper.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.echo(<span class="string">'http://XXXXXX/ 页面测试开始...'</span>);</div><div class="line">    <span class="keyword">if</span> (response.url === <span class="string">'http://XXXXXX/'</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.echo(<span class="string">'页面跳转 OK '</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.echo(<span class="string">'ERROR：页面跳转错误'</span>);</div><div class="line">        <span class="comment">// self.stop();</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 结构测试</span></div><div class="line">casper.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.exists(<span class="string">'a[class="weui-btn weui-btn_primary"]'</span>)) &#123;</div><div class="line">        <span class="keyword">this</span>.echo(<span class="string">'结构测试 OK'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.echo(<span class="string">'ERROR：结构测试错误'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 交互测试</span></div><div class="line">casper.thenClick(<span class="string">'.vote-info i'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/*this.waitForSelector('#div[style="color: green;"]', function () &#123;</span></div><div class="line"><span class="comment">        this.echo('ajax: ' + this.getTitle());</span></div><div class="line"><span class="comment">        this.echo(this.getHTML('#div', true));  // 获取 HTML 样式</span></div><div class="line"><span class="comment">    &#125;, function onTimeout() &#123;</span></div><div class="line"><span class="comment">        this.echo('wait selector timeout')</span></div><div class="line"><span class="comment">    &#125;, timeout = 15000);*/</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">casper.run();</div></pre></td></tr></table></figure><hr><h3 id="获取-DOM"><a href="#获取-DOM" class="headerlink" title="获取 DOM"></a>获取 DOM</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinks</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">'h3.r a'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.map.call(links, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> e.getAttribute(<span class="string">'href'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在外面操作不到 DOM 元素的，必须使用 evaluate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'#div'</span>)[<span class="number">0</span>].setAttribute(<span class="string">'name'</span>, <span class="string">'haha'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>1）create casper的时候，我们inject了jquery，这个jquery必须是保存在本地的，通过HTTP访问是无效的。</p><p>2）this.evaluate(getTitles)可以理解成，我们在CasperJs中，将getTitles这个方法注入到了访问的页面中，在访问的页面中执行这个方法并反问其返回值。</p><p>3）访问页面log的获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">casper.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">this</span>.page.onConsoleMessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(e);</div><div class="line">   &#125;</div><div class="line">   search_result_titles = <span class="keyword">this</span>.evaluate(getTitles)</div><div class="line">   <span class="keyword">this</span>.echo(search_result_titles.join(<span class="string">'\n'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>这样就可以侦听被访问页面的console.log事件，比导出到CasperJs中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;爬虫-amp-amp-前端页面自动化检测&quot;&gt;&lt;a href=&quot;#爬虫-amp-amp-前端页面自动化检测&quot; class=&quot;headerlink&quot; title=&quot;爬虫 &amp;amp;&amp;amp; 前端页面自动化检测&quot;&gt;&lt;/a&gt;爬虫 &amp;amp;&amp;amp; 前端页面
      
    
    </summary>
    
      <category term="CasperJS" scheme="http://yoursite.com/categories/CasperJS/"/>
    
    
      <category term="前端页面自动化测试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PhantomJS</title>
    <link href="http://yoursite.com/2017/01/12/PhantomJS/"/>
    <id>http://yoursite.com/2017/01/12/PhantomJS/</id>
    <published>2017-01-11T16:08:58.000Z</published>
    <updated>2017-03-12T01:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>近期老大分配任务，让我们写页面时，完成自动化测试，防止跨页面异常，总结了些技术点。</p><h3 id="Phantom-JS-是一个服务器端的-JavaScript-API-的-WebKit"><a href="#Phantom-JS-是一个服务器端的-JavaScript-API-的-WebKit" class="headerlink" title="Phantom JS 是一个服务器端的 JavaScript API 的 WebKit"></a>Phantom JS 是一个服务器端的 JavaScript API 的 WebKit</h3><p><a href="http://imweb.io/topic/560b402ac2317a8c3e08621c" target="_blank" rel="external">http://imweb.io/topic/560b402ac2317a8c3e08621c</a></p><ol><li><p>配置环境变量即可</p></li><li><p>phantomjs hello.js  运行</p></li></ol><h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, world!'</span>);</div><div class="line">phantom.exit();<span class="comment">// 否则 PhantomJS 将根本不会停止</span></div></pre></td></tr></table></figure><ol><li>传递参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var system = require(&apos;system&apos;);</div><div class="line">if (system.args.length === 1) &#123;</div><div class="line"> console.log(&apos;length error&apos;);</div><div class="line">&#125; else &#123;</div><div class="line"> system.args.forEach(function (arg, i) &#123;</div><div class="line">   console.log(i+ &apos;: &apos; + arg);</div><div class="line"> &#125;);</div><div class="line">&#125;</div><div class="line">phantom.exit();</div></pre></td></tr></table></figure><ol><li>网页截图</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.open(<span class="string">'http://www.baidu.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">page.viewportSize=&#123;<span class="attr">width</span>:<span class="number">500</span>,<span class="attr">height</span>:<span class="number">968</span>&#125;;  <span class="comment">// 指定图片大小</span></div><div class="line"><span class="comment">// page.clipRect = &#123; top: 0, left: 0, width: 600, height: 700 &#125;;// 指定图片大小</span></div><div class="line">page.render(<span class="string">'example.jpg'</span>);</div><div class="line">phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ol><li>计算页面加载时间</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create(),</div><div class="line">    system = <span class="built_in">require</span>(<span class="string">'system'</span>),</div><div class="line">    t, address;</div><div class="line"><span class="keyword">if</span> (system.args.length === <span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Usage: loadspeed.js &lt;some URL&gt;'</span>);</div><div class="line">    phantom.exit(<span class="number">1</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    t = <span class="built_in">Date</span>.now();</div><div class="line">    address = system.args[<span class="number">1</span>];</div><div class="line">    page.open(address, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (status !== <span class="string">'success'</span>) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'FAIL to load the address'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            t = <span class="built_in">Date</span>.now() - t;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Page title is '</span> + page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.title;</div><div class="line">            &#125;));</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Loading time '</span> + t + <span class="string">' msec'</span>);</div><div class="line">        &#125;</div><div class="line">        phantom.exit();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>$ phantomjs loadspeed.js http://www.baidu.com</code></p><p>输出的信息为 网页加载时间</p><ol><li>代码运算（获取页面 DOM）</li></ol><figure class="highlight js"><figcaption><span>var page = require('webpage').create();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">'http://localhost:9999/'</span>;</div><div class="line"><span class="comment">// 在 evaluate 不能运行 console 的方法，需要给 onConsoleMessage 添加函数对象</span></div><div class="line"><span class="comment">// 然后就可以在 evaluate 使用 console 了</span></div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line">page.open(url, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(status === <span class="string">'success'</span>)&#123;</div><div class="line">        <span class="keyword">var</span> divTxt = page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="number">111</span>);</div><div class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)[<span class="number">0</span>].innerText;</div><div class="line">        &#125;);</div><div class="line">        <span class="built_in">console</span>.log(divTxt);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>使用 evaluate() 方法，在此回调函数内，可以操作 dom。</p><p>代码是在“沙箱”中运行的，它没有办法读取在其所属页面上下文之外的任何JavaScript对象和变量。</p><ul><li><p>evaluate() 会返回一个对象，然而它仅限制于简单的对象并且不能包含方法或闭包。</p></li><li><p>onConsoleMessage // 可以在 evaluate 中使用 console</p></li></ul><ol><li>page.settings</li></ol><p><code>page.settings.userAgent        // 获取浏览器版本</code></p><p><code>page.settings.userAgent = &#39;SpecialAgent&#39;;    // 设置浏览器版本，模拟不同浏览器</code></p><ol><li>结合 JQ 测试</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line">page.open(<span class="string">'http://localhost:9999/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    page.includeJs(<span class="string">"http://cdn.bootcss.com/jquery/2.2.4/jquery.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log($(<span class="string">"#id"</span>).text());</div><div class="line">        &#125;);</div><div class="line">        phantom.exit()</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>注意，由于includeJs是异步加载脚本，所以phantom.exit()需要放在page.includeJs()的回调函数中，否则phantomjs进程会过早退出。</p><h4 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webPage.create();</div><div class="line"> </div><div class="line">page.includeJs(<span class="string">'http://code.jquery.com/jquery-1.10.2.min.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 模拟登录</span></div><div class="line">  <span class="keyword">var</span> $testForm = $(<span class="string">'form#login'</span>);</div><div class="line">  $testForm.find(<span class="string">'input[name="username"]'</span>).value(<span class="string">'barret'</span>);</div><div class="line">  $testForm.find(<span class="string">'input[name="password"]'</span>).value(<span class="string">'1234'</span>);</div><div class="line">  $testForm.submit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ol><li>用于获取 请求头、响应头</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</div><div class="line">page.onResourceRequested = <span class="function"><span class="keyword">function</span> (<span class="params">request</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Request '</span> + <span class="built_in">JSON</span>.stringify(request, <span class="literal">undefined</span>, <span class="number">4</span>));</div><div class="line">&#125;;</div><div class="line">page.onResourceReceived = <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Receive '</span> + <span class="built_in">JSON</span>.stringify(response, <span class="literal">undefined</span>, <span class="number">4</span>));</div><div class="line">&#125;;</div><div class="line">page.open(<span class="string">'http://localhost:9999/'</span>);</div></pre></td></tr></table></figure><ul><li>可以使用 JSON 工具对象</li></ul><ol><li>输出编码</li></ol><p><code>phantom.outputEncoding=&quot;gbk&quot;;    // 无效</code></p><ol><li>在 phantom 中 window 与 浏览器一致</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span> === <span class="keyword">this</span>);</div><div class="line">phantom.exit();</div></pre></td></tr></table></figure><h4 id="发起-POST-请求"><a href="#发起-POST-请求" class="headerlink" title="发起 POST 请求"></a>发起 POST 请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">"webpage"</span>);</div><div class="line"><span class="keyword">var</span> page = webPage.create();</div><div class="line"><span class="keyword">var</span> postBody = <span class="string">"user=username&amp;password=password"</span>;</div><div class="line">page.open(<span class="string">"http://www.google.com/"</span>, <span class="string">"POST"</span>, postBody, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Status: "</span> + status);</div><div class="line">  <span class="comment">// Do other things here...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="注入参数"><a href="#注入参数" class="headerlink" title="注入参数"></a>注入参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">page.open(<span class="string">'https://item.taobao.com/item.htm?id=520115087331'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> domId = <span class="string">"J_SellCounter"</span></div><div class="line">  <span class="keyword">var</span> sellCounter = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id).innerText;</div><div class="line">  &#125;, domId);</div><div class="line">  <span class="built_in">console</span>.log(sellCounter);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">render() 可以将打开的网页截图并保存成本地图片，可以将指定的图片文件名作为参数传入，</div><div class="line">render 方法可以根据文件名的后缀将图片保存成对应的格式。目前支持 PNG、GIF、JPEG、PDF 四种图片格式。</div><div class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</div><div class="line"><span class="keyword">var</span> page = webPage.create();</div><div class="line">page.viewportSize = &#123; <span class="attr">width</span>: <span class="number">1920</span>, <span class="attr">height</span>: <span class="number">1080</span> &#125;;</div><div class="line">page.open(<span class="string">"http://www.google.com"</span>, <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">  page.render(<span class="string">'google_home.jpeg'</span>, &#123;<span class="attr">format</span>: <span class="string">'jpeg'</span>, <span class="attr">quality</span>: <span class="string">'100'</span>&#125;);</div><div class="line">  phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>该方法的第一个参数是保存的文件名，第二个可选参数是一个JSON对象，format指定图片格式，quality指定0-100区间内的图片质量，必须是整数。</p><h4 id="onResourceRequested"><a href="#onResourceRequested" class="headerlink" title="onResourceRequested"></a>onResourceRequested</h4><p>当页面去请求一个资源时，会触发 onResourceRequested() 方法的回调函数。</p><p>回调函数接受两个参数，第一个参数 requestData 是这个 HTTP 请求的元数据对象，包括以下属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">id: 所请求资源的 id 号，这个应该是 phantomjs 给标识的。</div><div class="line">method:  所使用的 HTTP 方法 ( GET/POST/PUT/DELETE 等)。</div><div class="line">url:  所请求资源的URL</div><div class="line">time: 包含请求该资源时间的一个 <span class="built_in">Date</span> 对象。</div><div class="line">headers: 该请求的 http 请求头中的信息数组。</div><div class="line">第二个参数 networkRequest 包含以下方法：</div><div class="line">abort():  终止当前的网络请求，这会导致调用 onResourceError 回调函数。</div><div class="line">changeUrl( newUrl )：改变当前网络请求的 URL。</div><div class="line">setHeader( key, value )：设置HTTP头信息。</div><div class="line"></div><div class="line"><span class="keyword">var</span> webPage = <span class="built_in">require</span>( <span class="string">'webpage'</span> );</div><div class="line"><span class="keyword">var</span> page = webPage.create();</div><div class="line">page.onResourceRequested = <span class="function"><span class="keyword">function</span>(<span class="params">requestData, networkRequest</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Request (#'</span> + requestData.id + <span class="string">'): '</span> + <span class="built_in">JSON</span>.stringify(requestData));</div><div class="line">&#125;;</div><div class="line">page.open(<span class="string">"http://ke.qq.com"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(status) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"fail!"</span>);</div><div class="line">    &#125;</div><div class="line">    phantom.exit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;近期老大分配任务，让我们写页面时，完成自动化测试，防止跨页面异常，总结了些技术点。&lt;/p&gt;
&lt;h3 id=&quot;Phantom-JS-是一个服务器端的-JavaScript-API-的-WebKit&quot;&gt;&lt;a href=&quot;#Phantom-JS-是一个服务器端的-Jav
      
    
    </summary>
    
      <category term="PhantomJS" scheme="http://yoursite.com/categories/PhantomJS/"/>
    
    
      <category term="前端页面自动化测试" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2016/12/10/React/"/>
    <id>http://yoursite.com/2016/12/10/React/</id>
    <published>2016-12-10T11:00:41.000Z</published>
    <updated>2017-03-12T01:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="Virtual-DOM-·虚拟·"><a href="#Virtual-DOM-·虚拟·" class="headerlink" title="Virtual DOM ·虚拟·"></a>Virtual DOM ·虚拟·</h3><p>React 在每次需要渲染时，会先比较当前 DOM 内容和待渲染内容的差异， 然后再决定如何最优地更新 DOM</p><p>Props（属性，就是 element 上的 attrs，换个名字 property，变成复数，即 props）State 主要记录状态。</p><h3 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h3><p>就是 JS 与 HTML 的混写。</p><h4 id="关于-HTML-转义"><a href="#关于-HTML-转义" class="headerlink" title="关于 HTML 转义"></a>关于 HTML 转义</h4><p>React 会将所有要显示到 DOM 的字符串转义，防止 XSS。</p><p>所以如果 JSX 中含有转义后的实体字符比如 &copy; (©) 最后显示到 DOM 中不会正确显示，因为 React 自动把 &copy; 中的特殊字符转义了。有几种解决办法：</p><p>1 直接使用 UTF-8 字符 ©</p><p>2 使用对应字符的 Unicode 编码</p><p>3 使用数组组装 <div>{[‘cc ‘, <span>&copy;</span>, ‘ 2015’]}</div></p><p>4 直接插入原始的 HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;__html:</span> '<span class="attr">cc</span> &amp;<span class="attr">copy</span>; <span class="attr">2015</span>'&#125;&#125; /&gt;</span></div><div class="line">dangerouslySetInnerHTML 参考文档</div><div class="line">http://reactjs.cn/react/tips/dangerously-set-inner-html.html</div></pre></td></tr></table></figure></p><p>####　支持列表</p><p>在 jsx 中，并不是所有的标签都支持。</p><p>标签查询：<a href="http://reactjs.cn/react/docs/tags-and-attributes.html" target="_blank" rel="external">http://reactjs.cn/react/docs/tags-and-attributes.html</a></p><p>属性查询：class 属性 — className</p><p>for 属性 — htmlFor</p><h4 id="属性扩散"><a href="#属性扩散" class="headerlink" title="属性扩散"></a>属性扩散</h4><p>把多个参数一次性放到 HTML 标签中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ps = &#123;</div><div class="line">    p1:<span class="string">'ok1'</span>,</div><div class="line">    p2:<span class="string">'ok2'</span>,</div><div class="line">    p3:<span class="string">'ok3'</span></div><div class="line">&#125;</div><div class="line">ReactDom.render(</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;Hello &#123;...ps&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/div&gt;,</span></div><div class="line"><span class="regexp">    document.getElementById('app'),</span></div><div class="line"><span class="regexp">    function () &#123;</span></div><div class="line"><span class="regexp">        console.log('渲染完了')</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">)</span></div></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>{} 中 可以写 JS 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ReactDom.render(</div><div class="line">    &lt;div&gt;</div><div class="line">        &#123;<span class="comment">/*注释*/</span>&#125;</div><div class="line">        &#123;alert(<span class="number">123</span>)&#125;</div><div class="line">        &lt;Hello &#123;...ps&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></div><div class="line">    &lt;<span class="regexp">/div&gt;,</span></div><div class="line"><span class="regexp">    document.getElementById('app'),</span></div><div class="line"><span class="regexp">    function () &#123;</span></div><div class="line"><span class="regexp">        console.log('渲染完了')</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">)</span></div></pre></td></tr></table></figure><h3 id="顶层-API"><a href="#顶层-API" class="headerlink" title="顶层 API"></a>顶层 API</h3><p>生命周期的方法 都在 React.Component</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>getDefaultProps 与 getInitialState 在 es6 的写法中不被支持，es6 中，可以在构造函数中使用 this.props 与 this.state</p><p>componentWillReceiveProps(nextProps) 方法中的 参数 nextProps，表示改变的 props</p><p>componentDidUpdate</p><h3 id="ES5-与-ES6"><a href="#ES5-与-ES6" class="headerlink" title="ES5 与 ES6"></a>ES5 与 ES6</h3><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>React.createClass 方法在你的组件上做了一些额外的绑定工作，以确保在组件实例的方法内部， this 指向的是组件实例自身。</p><p>由于我们使用 ES6+ 的语法定义类的时候没有采用 React.createClass 的方式，所以，这样看来我们不得不手动来绑定这些方法中 this 的指向。</p><ol><li><p>this 可以在声明时就绑定</p></li><li><p>箭头函数可以预先传递好参数  onClick={ ()=&gt;f1(this.id) }  表示 将 id 当做参数传递进去，运行的时候再传递</p></li></ol><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><p>直接被类调用，实例不可以调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">        autoPlay: <span class="literal">false</span>,</div><div class="line">        maxLoops: <span class="number">10</span>,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    <span class="keyword">static</span> classMethod() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'hell1o'</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">static</span> age = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(Foo.classMethod());</div><div class="line"><span class="built_in">console</span>.log(Foo.defaultProps);</div><div class="line"><span class="built_in">console</span>.log(Foo.age);</div></pre></td></tr></table></figure><p>初始化 props、state 在构造函数中，使用 this</p><h4 id="React-书写规范"><a href="#React-书写规范" class="headerlink" title="React 书写规范"></a>React 书写规范</h4><ol><li><p>定义模块 class Life extends Component</p></li><li><p>导出模块 export default</p></li><li><p>引入模块 import</p></li><li><p>默认属性</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> defaultProps = &#123;</div><div class="line">autoPlay: <span class="literal">false</span>,</div><div class="line">maxLoops: <span class="number">10</span>,</div><div class="line">&#125;;  <span class="comment">// 注意这里有分号</span></div></pre></td></tr></table></figure><ol><li>默认state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props)&#123;</div><div class="line"><span class="keyword">super</span>(props);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"构造函数"</span>);</div><div class="line"><span class="comment">// 初始化了我们的 state，这是被推荐的写法</span></div><div class="line"><span class="keyword">this</span>.state = &#123;</div><div class="line">props1:<span class="string">"初始化state"</span></div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>定义方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   生命周期的方法</div><div class="line">   componentWillMount()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</div><div class="line">   &#125;</div><div class="line">  自定义的方法</div><div class="line"> click1=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"点击了单击事件"</span>);</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">         props1:<span class="string">"改变state的值"</span></div><div class="line">      &#125;)</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"点击了单击事件结束"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>函数的调用方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.handleMouseOver(<span class="string">"qqq"</span>)代表函数的返回值</div><div class="line">&lt;p onMouseOver=&#123; ()=&gt;<span class="keyword">this</span>.handleMouseOver(<span class="string">"qqq"</span>) &#125; onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>,<span class="number">23</span>,<span class="string">"dfdf"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)&#125;&gt;</div><div class="line">    You &#123;text&#125; <span class="keyword">this</span>. Click to toggle.</div><div class="line">&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">onMouseOver 接受的是函数，()=&gt;this.handleMouseOver("qqq") 的意思是，return this.handleMouseOver("qqq")  /</span><span class="regexp">/ 返回值的函数</span></div><div class="line"><span class="regexp">正确写法</span></div><div class="line"><span class="regexp">handler=(e)=&gt;&#123;</span></div><div class="line"><span class="regexp">    console.log(e.target.value);</span></div><div class="line"><span class="regexp">    this.setState(&#123;</span></div><div class="line"><span class="regexp">        v:e.target.value</span></div><div class="line"><span class="regexp">    &#125;);</span></div><div class="line"><span class="regexp">    console.log(this.state.v);</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">render() &#123;</span></div><div class="line"><span class="regexp">    return (</span></div><div class="line"><span class="regexp">        &lt;div&gt;</span></div><div class="line"><span class="regexp">            &lt;input ref=&#123;'input1'&#125; type="text" value=&#123;this.state.v&#125; onChange=&#123;this.handler&#125;/</span>&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><p>获取事件对象<br>点击事件有事件处理函数，而鼠标悬浮没有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">handleClick=<span class="function">(<span class="params">pm1,pm2,pm3,e</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(pm1);</div><div class="line">    <span class="built_in">console</span>.log(pm2);</div><div class="line">    <span class="built_in">console</span>.log(pm3);</div><div class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// 有事件对象</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 用箭头函数去定义自己的方法</span></div><div class="line">handleMouseOver=<span class="function">(<span class="params">str,e</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(str);</div><div class="line">    <span class="built_in">console</span>.log(e);  <span class="comment">// 无事件对象</span></div><div class="line">&#125;</div><div class="line">render() &#123;</div><div class="line">    <span class="keyword">const</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="comment">// return；里面是要渲染的html页面</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;p onMouseOver=&#123;()=&gt;<span class="keyword">this</span>.handleMouseOver(<span class="string">"期"</span>)&#125; onClick=&#123;()=&gt;<span class="keyword">this</span>.handleClick(<span class="keyword">this</span>,<span class="number">223</span>,<span class="string">"dfdf"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)&#125;&gt;</div><div class="line">            You &#123;text&#125; <span class="keyword">this</span>. Click to toggle.</div><div class="line">        &lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    );</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><h3 id="事件移除"><a href="#事件移除" class="headerlink" title="事件移除"></a>事件移除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">    <span class="comment">// 1、在已经插入到真实的dom节点之后，注册窗体改变大小的事件监听</span></div><div class="line">    <span class="comment">// 2、用 ajax 发起数据请求的操作也要在 componentDidMount 方法里面去调用</span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</div><div class="line">&#125;</div><div class="line"></div><div class="line">componentWillUnmount() &#123;</div><div class="line">    <span class="comment">// 1、在组件将要被卸载的时候移除监听事件，防止对其他组件的影响</span></div><div class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="获取-DOM-元素"><a href="#获取-DOM-元素" class="headerlink" title="获取 DOM 元素"></a>获取 DOM 元素</h4><p>通过 refs 与 ref 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">设置元素</div><div class="line">&lt;input</div><div class="line">    ref=<span class="string">"theInput1"</span></div><div class="line">    value=&#123;<span class="keyword">this</span>.state.userInput&#125;</div><div class="line">    onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line">获取元素</div><div class="line">componentWillMount()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.theInput1)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>受控表单，使用 onchange 事件控制。</p><p>组合组件，循环渲染子组件，渲染子组件的时候，需要加 key={} 属性，提高 虚拟DOM 效率。</p><h4 id="props-属性校验"><a href="#props-属性校验" class="headerlink" title="props 属性校验"></a>props 属性校验</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 进行属性校验</span></div><div class="line"><span class="keyword">static</span> propTypes = &#123;</div><div class="line">    autoPlay: React.PropTypes.bool.isRequired,</div><div class="line">    maxLoops: React.PropTypes.number.isRequired,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>爷爷 不通过 爸爸 直接给 孙子 传递数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 孙子</span></div><div class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</div><div class="line">    <span class="comment">// 在孙子里面校验祖宗里面的属性</span></div><div class="line">    contextTypes: &#123;</div><div class="line">        color: React.PropTypes.string</div><div class="line">    &#125;,</div><div class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.context.age&#125;&lt;<span class="regexp">/h1&gt;</span></div><div class="line"><span class="regexp">                &lt;button style=&#123;&#123;background: this.context.color&#125;&#125;&gt;</span></div><div class="line"><span class="regexp">                    &#123;this.props.children&#125;</span></div><div class="line"><span class="regexp">                &lt;/</span>button&gt;</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 爹</span></div><div class="line"><span class="regexp">var Message = React.createClass(&#123;</span></div><div class="line"><span class="regexp">    render: function() &#123;</span></div><div class="line"><span class="regexp">        return (</span></div><div class="line"><span class="regexp">            &lt;div&gt;</span></div><div class="line"><span class="regexp">                &#123;this.props.text&#125; &lt;Button&gt;Delete&lt;/</span>Button&gt;</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 爷爷</span></div><div class="line"><span class="regexp">var MessageList = React.createClass(&#123;</span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/ 通过这个方法去传递属性</span></div><div class="line"><span class="regexp">    getChildContext: function() &#123;</span></div><div class="line"><span class="regexp">        /</span><span class="regexp">/ 传递给子孙</span></div><div class="line"><span class="regexp">        return &#123;</span></div><div class="line"><span class="regexp">            color: "red",</span></div><div class="line"><span class="regexp">            age:12</span></div><div class="line"><span class="regexp">        &#125;;</span></div><div class="line"><span class="regexp">    &#125;,</span></div><div class="line"><span class="regexp">    /</span><span class="regexp">/ 传递给子孙属性的类型校验</span></div><div class="line"><span class="regexp">    childContextTypes: &#123;</span></div><div class="line"><span class="regexp">        color: React.PropTypes.string,</span></div><div class="line"><span class="regexp">        age: React.PropTypes.number</span></div><div class="line"><span class="regexp">    &#125;,</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">    render: function() &#123;</span></div><div class="line"><span class="regexp">        var children = this.props.messages.map(function(message) &#123;</span></div><div class="line"><span class="regexp">            return &lt;Message text=&#123;message.text&#125; /</span>&gt;;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>ES6 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props,context)&#123;</div><div class="line"><span class="keyword">super</span>(props,context)</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> contextTypes=&#123;</div><div class="line">xx:xx</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p><code>react-addons-css-transition-group</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// react中的dom监听事件</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactCSSTransitionGroup <span class="keyword">from</span> <span class="string">'react-addons-css-transition-group'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'./animate.css'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Animate</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">items</span>: [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'click'</span>, <span class="string">'me'</span>]&#125;;</div><div class="line">        <span class="keyword">this</span>.handleAdd = <span class="keyword">this</span>.handleAdd.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleAdd() &#123;</div><div class="line">        <span class="keyword">const</span> newItems = <span class="keyword">this</span>.state.items.concat([</div><div class="line">            prompt(<span class="string">'Enter some text'</span>)</div><div class="line">        ]);</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: newItems&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handleRemove(i) &#123;</div><div class="line">        <span class="keyword">let</span> newItems = <span class="keyword">this</span>.state.items.slice();</div><div class="line">        newItems.splice(i, <span class="number">1</span>);</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: newItems&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> items = <span class="keyword">this</span>.state.items.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> (</div><div class="line">            &lt;div key=&#123;item&#125; onClick=&#123;() =&gt; <span class="keyword">this</span>.handleRemove(i)&#125;&gt;</div><div class="line">                &#123;item&#125;</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        ));</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">        return (</span></div><div class="line"><span class="regexp">            &lt;div&gt;</span></div><div class="line"><span class="regexp">                &lt;button onClick=&#123;this.handleAdd&#125;&gt;Add Item1&lt;/</span>button&gt;</div><div class="line">                &#123;<span class="comment">/*这个组件虽然叫动画，但是它只负责显示隐藏的动画*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*你想让谁有显示隐藏的动画你就用ReactCSSTransitionGroup包裹谁*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*后添加进去的元素和删除的元素才有动画效果，同时添加元素和ReactCSSTransitionGroup是没有动画效果的*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*transitionName 表示引入 css 文件样式的 前缀（看CSS文件）*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*是否开启 transitionAppear 初始动画*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*component 指定动画元素被哪个元素包裹*/</span>&#125;</div><div class="line">                &#123;<span class="comment">/*加上 transitionAppear 会有警告 */</span>&#125;</div><div class="line">                &lt;ReactCSSTransitionGroup</div><div class="line">                    component=<span class="string">"div"</span></div><div class="line">                    transitionName=<span class="string">"example"</span></div><div class="line">                    transitionEnterTimeout=&#123;<span class="number">500</span>&#125;</div><div class="line">                    transitionLeaveTimeout=&#123;<span class="number">300</span>&#125;&gt;</div><div class="line">                    &#123;items&#125;</div><div class="line">                &lt;<span class="regexp">/ReactCSSTransitionGroup&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*-enter是进入的时候的初始状态*/</span></div><div class="line">.example-enter &#123;</div><div class="line">    opacity: <span class="number">0.01</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-enter-active是进入时候的结束状态*/</span></div><div class="line">.example-enter.example-enter-active &#123;</div><div class="line">    opacity: <span class="number">1</span>;</div><div class="line">    transition: opacity <span class="number">500</span>ms ease-<span class="keyword">in</span>;</div><div class="line">&#125;</div><div class="line">.example-leave &#123;</div><div class="line">    opacity: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">.example-leave.example-leave-active &#123;</div><div class="line">    opacity: <span class="number">0.01</span>;</div><div class="line">    transition: opacity <span class="number">300</span>ms ease-<span class="keyword">in</span>;</div><div class="line">&#125;</div><div class="line">.example-appear &#123;</div><div class="line">    opacity: <span class="number">0.01</span>;</div><div class="line">&#125;</div><div class="line">.example-appear.example-appear-active &#123;</div><div class="line">    opacity: <span class="number">1</span>;</div><div class="line">    transition: opacity <span class="number">.5</span>s ease-<span class="keyword">in</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;Virtual-DOM-·虚拟·&quot;&gt;&lt;a href=&quot;#Virtual-DOM-·虚拟·&quot; class=&quot;headerlink&quot; title=&quot;Virtual DOM ·虚拟·&quot;&gt;&lt;/a&gt;Virtual DOM ·虚拟·&lt;/h3&gt;&lt;p&gt;React 在每次
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://yoursite.com/2016/12/03/Webpack/"/>
    <id>http://yoursite.com/2016/12/03/Webpack/</id>
    <published>2016-12-03T02:00:41.000Z</published>
    <updated>2017-03-12T01:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>官网：<a href="http://webpack.github.io/docs/" target="_blank" rel="external">http://webpack.github.io/docs/</a></p><p>Webpack-handlebook:  <a href="http://zhaoda.net/webpack-handbook/" target="_blank" rel="external">http://zhaoda.net/webpack-handbook/</a></p><p>Gitbook: <a href="http://fakefish.github.io/react-webpack-cookbook/index.html" target="_blank" rel="external">http://fakefish.github.io/react-webpack-cookbook/index.html</a></p><hr><h3 id="Gulp-任务型处理"><a href="#Gulp-任务型处理" class="headerlink" title="Gulp 任务型处理"></a>Gulp 任务型处理</h3><p>Webpack 也是构建工具，适合处理 SAP，例如 react vue ng2</p><hr><h3 id="Webpack-脚本命令"><a href="#Webpack-脚本命令" class="headerlink" title="Webpack 脚本命令"></a>Webpack 脚本命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">运行wp：webpack  --config  配置文件名</div><div class="line">      默认查找，webpack.config.js</div><div class="line"></div><div class="line">webpack -w 提供 watch 方法，实时进行打包更新</div><div class="line">webpack -p对打包后的文件进行压缩</div><div class="line">webpack -d 提供 SourceMaps，方便调试</div><div class="line">webpack --colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤</div><div class="line">webpack --profile 输出性能数据，可以看到每一步的耗时</div><div class="line">webpack --display-modules 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</div><div class="line">webpack --display-error-details方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题</div></pre></td></tr></table></figure><h4 id="webpack-可以作为-NodeAPI-运行"><a href="#webpack-可以作为-NodeAPI-运行" class="headerlink" title="webpack 可以作为 NodeAPI 运行"></a>webpack 可以作为 NodeAPI 运行</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line">webpack(&#123;</div><div class="line"><span class="comment">//configuration</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="webpack-dev-server-官方插件"><a href="#webpack-dev-server-官方插件" class="headerlink" title="webpack-dev-server  官方插件"></a>webpack-dev-server  官方插件</h3><p>基于 Express 框架的开发服务器，包含了 webpack 的所有功能。</p><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><ol><li><p>监听文件变化，实时打包</p></li><li><p>自动刷新</p></li></ol><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><ol><li>webpack-dev-server   –save-dev</li></ol><h4 id="npm-配置文件，scripts-命令行："><a href="#npm-配置文件，scripts-命令行：" class="headerlink" title="npm 配置文件，scripts 命令行："></a>npm 配置文件，scripts 命令行：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="string">"scripts"</span>: &#123;</div><div class="line"> <span class="string">"develop"</span>: <span class="string">"webpack-dev-server  --config webpack.develop.config.js </span></div><div class="line"><span class="string">--devtool eval --progress --colors --hot --content-base src"</span>,</div><div class="line">   <span class="string">"publish"</span>: <span class="string">"webpack --config webpack.publish.config.js"</span>,</div><div class="line">  <span class="string">"watch"</span>: <span class="string">"webpack --config webpack.develop.config.js --watch --hot"</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--devtool <span class="built_in">eval</span>为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</div><div class="line">--progress显示合并代码进度</div><div class="line">--colors -- hot命令行中显示颜色</div><div class="line">--content-base  项目根目录，以此目录搭建了一个服务器</div><div class="line">--host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --port <span class="number">9999</span>指定端口 与 IP</div></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol><li><p>webpack-dev-server 生成的 bundle.js 文件是在内存中的，并没有实际生成，所以在 html 中，只需要引入根目录即可。</p></li><li><p>如果服务器目录下已经有 bundle.js，则不会自动刷新，需要删除</p></li></ol><h4 id="自动监听"><a href="#自动监听" class="headerlink" title="自动监听"></a>自动监听</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">entry 改成数组，前两个参数固定写法</div><div class="line">entry:[</div><div class="line">    <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost:9999'</span>,</div><div class="line">    path.resolve(__dirname,<span class="string">'src/js/app.js'</span>)     <span class="comment">// 监听的入口文件</span></div><div class="line">]</div></pre></td></tr></table></figure><p>entry 的入口文件引入时，会把此入口文件中引入的文件进行 loader 处理，以此类推形成文件流。</p><hr><h3 id="加载器-Loader，预处理操作"><a href="#加载器-Loader，预处理操作" class="headerlink" title="加载器 Loader，预处理操作"></a>加载器 Loader，预处理操作</h3><h4 id="加载器-Loader-–-解析-JSX、ES6"><a href="#加载器-Loader-–-解析-JSX、ES6" class="headerlink" title="加载器 Loader – 解析 JSX、ES6"></a>加载器 Loader – 解析 JSX、ES6</h4><ol><li>安装</li></ol><p><code>babel-loader    babel-core    babel-preset-es2015    babel-preset-react  --save-dev</code></p><ol><li>配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">        <span class="comment">// 转换 JSX、ES6</span></div><div class="line">        &#123;</div><div class="line">            test: <span class="regexp">/\.jsx?$/</span>,    <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></div><div class="line">            loader: <span class="string">'babel-loader'</span>,    <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></div><div class="line">            query: &#123;</div><div class="line">                presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]    <span class="comment">// 预设，将 es6、react 转换为 es5</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>在配置文件中，引入的 xxx-loader 后面的 -loader 可以省略</p></li><li><p>添加 bable 补丁</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></div><div class="line">    loader: <span class="string">'babel'</span>,<span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></div><div class="line">    query: &#123;</div><div class="line">        presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>,<span class="string">'stage-0'</span>,<span class="string">'stage-1'</span>,<span class="string">'stage-2'</span>,<span class="string">'stage-3'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另一种写法，创建 .babelrc 文件，将配置项写入此文件（VUE 分开写）把上面配置文件中的 query 写入此文件，注意使用 JSON 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"query"</span>: &#123;</div><div class="line">                <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>]   </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="加载器-Loader-–-加载-CSS、在-JSX-中引入-CSS"><a href="#加载器-Loader-–-加载-CSS、在-JSX-中引入-CSS" class="headerlink" title="加载器 Loader – 加载 CSS、在 JSX 中引入 CSS"></a>加载器 Loader – 加载 CSS、在 JSX 中引入 CSS</h4><ol><li>插件</li></ol><p>css-loader    会遍历 CSS 文件，然后找到文件中的 url 表达式进行处理（例如图片处理）</p><p>style-loader    会把 css 代码插入到页面 style 标签中</p><ol><li>配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.css$/</span>,         <span class="comment">// css 文件</span></div><div class="line">    loader: <span class="string">'style-loader!css-loader'</span>     <span class="comment">// 从右向左执行，先 css 后 style</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="加载器-Loader-–-加载sass"><a href="#加载器-Loader-–-加载sass" class="headerlink" title="加载器 Loader – 加载sass"></a>加载器 Loader – 加载sass</h4><ol><li><p>sass-loader</p></li><li><p>添加配置文件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 处理 scss 文件</span></div><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.scss/</span>,         </div><div class="line">    loader: <span class="string">'style-loader!css-loader!sass-loader'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="加载器-Loader-–-图片处理"><a href="#加载器-Loader-–-图片处理" class="headerlink" title="加载器 Loader – 图片处理"></a>加载器 Loader – 图片处理</h4><p>不引入此插件，在 CSS、SASS 文件中使用 url 引入图片时，会报错。</p><p>把比较小的图片文件转化为 BASE64，减少 HTTP 请求，只对 CSS 文件引入图片有效，对 HTML 引入图片无效。</p><ol><li>url-loader  file-loader</li></ol><p>现在 url-loader 已经包含了 file-loader</p><ol><li>配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      test: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">      loader: <span class="string">'url?limit=25000'</span><span class="comment">// 图片小于 2500，会以 base64 方式显示</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="加载器-Loader-–-字体文件处理"><a href="#加载器-Loader-–-字体文件处理" class="headerlink" title="加载器 Loader – 字体文件处理"></a>加载器 Loader – 字体文件处理</h4><ol><li><p>url-loader  file-loader</p></li><li><p>配置文件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.(woff|eot|ttf|woff2|svg)$/</span>,</div><div class="line">    loader: <span class="string">'url?limit=2500'</span>    <span class="comment">// 文件小于 2500，会嵌入 css 文件，减少网络请求</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 开发环境</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// 自动打开浏览器插件</span></div><div class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 单页面 SPA 文件入口，无自动刷新</span></div><div class="line">    <span class="comment">// entry: "./src/js/app.js",</span></div><div class="line">    <span class="comment">// 自动刷新，官方写法</span></div><div class="line">    entry:[</div><div class="line">        <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">        <span class="string">'webpack-dev-server/client?http://localhost:9999'</span>,</div><div class="line">        path.resolve(__dirname,<span class="string">'src/js/app.js'</span>)     <span class="comment">// 监听的入口文件</span></div><div class="line">    ],</div><div class="line">    <span class="comment">// 输出文件</span></div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname,<span class="string">'./dist'</span>),   <span class="comment">// 输出文件位置</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 加载器</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="comment">// 先检查代码风格</span></div><div class="line">        <span class="comment">// preLoaders: [</span></div><div class="line">        <span class="comment">//     &#123; test: /\.js$/, loader: "eslint-loader", exclude: /node_modules/ &#125;</span></div><div class="line">        <span class="comment">// ],</span></div><div class="line">        loaders: [</div><div class="line">            <span class="comment">// 转换 JSX、ES6</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.jsx?$/</span>,    <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,    <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></div><div class="line">                query: &#123;</div><div class="line">                    presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>,<span class="string">'stage-0'</span>,<span class="string">'stage-1'</span>,<span class="string">'stage-2'</span>,<span class="string">'stage-3'</span>]    <span class="comment">// 将 ES6、react 语法转换为 ES5，stage 为 转换 es6 的补丁</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 在 JSX 中，引入 CSS 文件</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.css$/</span>,         <span class="comment">// css 文件</span></div><div class="line">                loader: <span class="string">'style-loader!css-loader'</span>     <span class="comment">// 从右向左执行，先 css 后 style</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 处理 scss 文件</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.scss/</span>,</div><div class="line">                loader: <span class="string">'style-loader!css-loader!sass-loader'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 处理 css 文件中 url 引入的文件，如果不引入此插件，会报错</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(png|jpg|svg|jpeg)$/</span>,</div><div class="line">                loader: <span class="string">'url?limit=2500'</span>    <span class="comment">// 图片小于 2500，会以 base64 方式显示</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 字体文件处理</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(woff|eot|ttf|woff2|svg)$/</span>,</div><div class="line">                loader: <span class="string">'url?limit=2500'</span>    <span class="comment">// 文件小于 2500，会嵌入 css 文件，减少网络请求</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>: <span class="string">'http://localhost:9999/'</span>, <span class="attr">browser</span>: <span class="string">'chrome'</span>&#125;)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="发布环境配置"><a href="#发布环境配置" class="headerlink" title="发布环境配置"></a>发布环境配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发布环境</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="comment">// html 插件</span></div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</div><div class="line"><span class="comment">// 提取 css 文件的插件</span></div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"><span class="comment">// 删除文件夹</span></div><div class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 单页面spa的入口文件</span></div><div class="line">    entry: &#123;</div><div class="line">        app: path.resolve(__dirname, <span class="string">'src/js/app.js'</span>),</div><div class="line">        vendors: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]     <span class="comment">// 要被抽离的第三方插件</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 输出文件</span></div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),   <span class="comment">// 输出文件位置</span></div><div class="line">        filename: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="comment">// 加载器</span></div><div class="line">        loaders: [</div><div class="line">            <span class="comment">// 转换 JSX、ES6</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.jsx?$/</span>,    <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></div><div class="line">                loader: <span class="string">'babel-loader'</span>,    <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></div><div class="line">                query: &#123;</div><div class="line">                    presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>,<span class="string">'stage-0'</span>,<span class="string">'stage-1'</span>,<span class="string">'stage-2'</span>,<span class="string">'stage-3'</span>]    <span class="comment">// 预设，将 es6、react 转换为 es5</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 在 JSX 中，引入 CSS 文件</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.css$/</span>,         <span class="comment">// css 文件</span></div><div class="line">                <span class="comment">// loader: 'style-loader!css-loader'     // 从右向左执行，先 css 后 style</span></div><div class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>,<span class="string">"css-loader"</span>)<span class="comment">// 如果同时使用多个加载器中间用！连接，加载器的执行顺序是从右往左</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 处理 scss 文件</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.scss/</span>,</div><div class="line">                <span class="comment">// loader: 'style-loader!css-loader!sass-loader'</span></div><div class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader!sass-loader"</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 处理 css 文件中 url 引入的文件，如果不引入此插件，会报错</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(png|jpg|svg|jpeg)$/</span>,</div><div class="line">                loader: <span class="string">'url?limit=2500&amp;name=images/[name].[ext]'</span>   <span class="comment">// 输出到 images 文件夹下，[name] 与 [ext] 保持原有文件名与后缀名</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 字体文件处理</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(woff|eot|ttf|woff2|svg)$/</span>,</div><div class="line">                loader: <span class="string">'url?limit=2500&amp;name=fonts/[name].[ext]'</span>    <span class="comment">// 文件小于 2500，会嵌入 css 文件，减少网络请求</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 插件</span></div><div class="line">    plugins: [</div><div class="line">        <span class="comment">// 删除文件夹</span></div><div class="line">        <span class="keyword">new</span> CleanPlugin([<span class="string">'dist'</span>]),</div><div class="line">        <span class="comment">// 分离第三方应用插件,name 属性会自动指向 entry 中 vendros 属性，filename 属性中的文件会自动构建到 output 中的 path 属性下面</span></div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<span class="attr">name</span>: <span class="string">'vendors'</span>, <span class="attr">filename</span>: <span class="string">'vendors.js'</span>&#125;),</div><div class="line">        <span class="comment">// HTML 处理</span></div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            template: <span class="string">'./src/temp.html'</span>,    <span class="comment">// html 模板</span></div><div class="line">            htmlWebpackPlugin: &#123;</div><div class="line">                <span class="string">"files"</span>: &#123;</div><div class="line">                    <span class="string">"css"</span>: [<span class="string">"app.css"</span>],     <span class="comment">// 在 html 模板中 引入 css</span></div><div class="line">                    <span class="string">"js"</span>: [<span class="string">"vendors.js"</span>,<span class="string">"bundle.js"</span>]    <span class="comment">// 在 html 模板中 引入 js</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            minify: &#123;</div><div class="line">                removeComments: <span class="literal">true</span>,   <span class="comment">// 删除注释</span></div><div class="line">                collapseWhitespace: <span class="literal">true</span>,</div><div class="line">                removeAttributeQuotes: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">        <span class="comment">// 提取 css</span></div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"app.css"</span>),</div><div class="line">        <span class="comment">// 压缩</span></div><div class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">            <span class="comment">// 取消警告</span></div><div class="line">            compress: &#123;</div><div class="line">                warnings: <span class="literal">false</span></div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">        <span class="comment">// 内置插件，自动优化第三方包</span></div><div class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">            <span class="comment">//去掉react中的警告，react会自己判断</span></div><div class="line">            <span class="string">'process.env'</span>: &#123;</div><div class="line">                NODE_ENV: <span class="string">'"production"'</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;官网：&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/Webpack/"/>
    
    
      <category term="自动化构建工具" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 脚手架</title>
    <link href="http://yoursite.com/2016/11/10/Gulp/"/>
    <id>http://yoursite.com/2016/11/10/Gulp/</id>
    <published>2016-11-09T17:01:00.000Z</published>
    <updated>2017-03-12T01:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="扯淡"><a href="#扯淡" class="headerlink" title="扯淡"></a>扯淡</h3><p>最近公司项目使用的是 Gulp，之前用过一些，但是该忘的都忘了，自己也懒得去翻以前的笔记，正好博客起了作用（可以鞭策我整理和学习）(●’◡’●)</p><hr><h3 id="插件总览"><a href="#插件总览" class="headerlink" title="插件总览"></a>插件总览</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">// 编译 LESS</span></div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);    </div><div class="line"><span class="comment">// 压缩 CSS</span></div><div class="line"><span class="keyword">var</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>);    </div><div class="line"><span class="comment">// 自动添加 webkit 前缀，写代码的时候尽量写全，不要太相信这个插件</span></div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autopreixer'</span>);</div><div class="line"><span class="comment">// 重命名文件   </span></div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);    </div><div class="line"><span class="comment">// 图片压缩</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="comment">// JS 压缩  </span></div><div class="line"><span class="keyword">var</span> jsMin = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>); </div><div class="line"><span class="comment">// JS 合并</span></div><div class="line"><span class="keyword">var</span> jsConcat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>); </div><div class="line"><span class="comment">// HTML 压缩</span></div><div class="line"><span class="keyword">var</span> HTMLMin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="comment">// 文件打上版本号，防止浏览器缓存 </span></div><div class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);  </div><div class="line"><span class="comment">// 替换 HTML 文件中引用的文件，替换为带有版本号的文件</span></div><div class="line"><span class="keyword">var</span> revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>);   </div><div class="line"><span class="comment">// 将 HTML 中 引入的多个 script 标签，替换成一个（拥有自动合并功能）</span></div><div class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</div><div class="line"><span class="comment">// 压缩    </span></div><div class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>);</div></pre></td></tr></table></figure><hr><h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LESS 编译</span></div><div class="line">gulp.task(<span class="string">'less2css'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   gulp.src(<span class="string">'./src/less/*.less'</span>)</div><div class="line">       .pipe(less())            <span class="comment">// 编译 LESS 为 CSS</span></div><div class="line">       .pipe(autoprefixer())    <span class="comment">// CSS 添加 webkit 前缀</span></div><div class="line">       .pipe(cssmin())          <span class="comment">// 压缩 CSS 文件</span></div><div class="line">       .pipe(rev())             <span class="comment">// 给 CSS 文件打版本号</span></div><div class="line">       .pipe(gulp.dest(<span class="string">'./public/css'</span>)) <span class="comment">// 输出带有版本号的 CSS 文件</span></div><div class="line">       .pipe(rev.manifest())    <span class="comment">// 获取版本号与文件的对应关系</span></div><div class="line">       .pipe(gulp.dest(<span class="string">'./src/rev'</span>));    <span class="comment">// 对应关系 json 文件输出位置</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// JS 压缩、合并</span></div><div class="line">gulp.task(<span class="string">'JSMin'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/js/*.js'</span>)</div><div class="line">        .pipe(jsMin())</div><div class="line">        .pipe(jsConcat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(rev())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/js'</span>))</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./src/rev'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 文件重命名</span></div><div class="line">gulp.task(<span class="string">'rename'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   gulp.src(<span class="string">'./index.html'</span>)</div><div class="line">       .pipe(rename(<span class="string">'demo.html'</span>))</div><div class="line">       .pipe(gulp.dest(<span class="string">'./'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 图片压缩</span></div><div class="line"><span class="comment">// 坑：</span></div><div class="line"><span class="comment">// 1. 图片在两个目录，需要在一个 src 方法写入两个路径（通过数组传入多个文件）</span></div><div class="line"><span class="comment">// 2. 处理前文件的不同路径输出到对应文件路径（通过配置项 base 写入共同路径部分，剩余不同部分的路径输出到指定位置）</span></div><div class="line"><span class="comment">// 3. 层级获取文件（path/**/*，会把 path 下的所有层级目录的所有文件都遍历）</span></div><div class="line">gulp.task(<span class="string">'imgMin'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   gulp.src([<span class="string">'./src/imgs/**/*'</span>,<span class="string">'./src/upload/**/*'</span>],&#123;<span class="attr">base</span>:<span class="string">'./src'</span>&#125;)</div><div class="line">       .pipe(imagemin())</div><div class="line">       .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// HTML 压缩，配置项比较多，自己查查</span></div><div class="line">gulp.task(<span class="string">'HTMLMin'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   gulp.src(<span class="string">'./src/*.html'</span>)</div><div class="line">       .pipe(HTMLMin(&#123;</div><div class="line">          collapseWhitespace:<span class="literal">true</span>,   <span class="comment">// 合并空白符</span></div><div class="line">          removeComments:<span class="literal">true</span>, <span class="comment">// 删除注释</span></div><div class="line">          minifyJS:<span class="literal">true</span> <span class="comment">// 压缩 HTML 中嵌入的 JS 代码</span></div><div class="line">       &#125;))</div><div class="line">       .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将 HTML 中不带有版本号的引用改成带有版本号</span></div><div class="line">gulp.task(<span class="string">'revCollector'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src([<span class="string">'./src/rev/*.json'</span>,<span class="string">'./public/*.html'</span>]) <span class="comment">// 版本号关系文件 与 将要替换的 html 文件</span></div><div class="line">        .pipe(revCollector())  <span class="comment">// 替换 html 内的文件名</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 替换成一个 script，HTML 写法固定，会把 JS 文件与 CSS 进行合并</span></div><div class="line"><span class="comment">// HTML 固定写法</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">&lt;!--build:js js/main.min.js --&gt;</span></div><div class="line"><span class="comment">&lt;script src="js/lib/a-library.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;script src="js/lib/another-library.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;script src="js/main.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line"><span class="comment">&lt;!--build:css css/all.js --&gt;</span></div><div class="line"><span class="comment">&lt;script src="css/1.css"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;script src="css/2.css"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line">gulp.task(<span class="string">'useref'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./src/*.html'</span>)</div><div class="line">        .pipe(useref()) <span class="comment">// 会把 JS CSS 合并，并且替换 HTML 文件</span></div><div class="line">        .pipe(gulpif(<span class="string">'*.js'</span>,jsMin()))  <span class="comment">// 此流中有 CSS JS HTML 文件，假如文件是以 .js 结尾，则调用另一个插件压缩</span></div><div class="line">        .pipe(gulpif(<span class="string">'*.css'</span>,cssmin()))<span class="comment">// 假如文件是以 .css 结尾，则调用另一个插件压缩</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./src/useref'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">// t1 与 t2 是 default 的启动项依赖，会先执行 t1 与 t2，但是不会等待 t1 t2 结束再执行 def</span></div><div class="line"><span class="comment">// 换句话就是，优先启动 t1 t2，再启动 def，但是 def 不会等待 t1 t2 执行完毕</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'t1'</span>,<span class="string">'t2'</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'def'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t1'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'t1'</span>);</div><div class="line">    &#125;,<span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t2'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'t2'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// t2 def t1</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'t1'</span>,<span class="string">'t2'</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'def'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t1'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'t1'</span>);</div><div class="line">        cb();</div><div class="line">    &#125;,<span class="number">2000</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t2'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'t2'</span>);</div><div class="line">    cb();</div><div class="line">&#125;);</div><div class="line"><span class="comment">// t2 t1 def，cb 是官方提供的方式</span></div></pre></td></tr></table></figure><h4 id="队列插件"><a href="#队列插件" class="headerlink" title="队列插件"></a>队列插件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可以控制任务的执行顺序，但是不能解决异步问题</span></div><div class="line"><span class="comment">// 不用插件写顺序的时候，需要在每个任务后面写 [ ] 数组，填写依赖关系</span></div><div class="line"><span class="comment">// 使用插件可以一起写，很方便，直观</span></div><div class="line"><span class="comment">// 如果想要控制异步，还是需要使用 callback() 与 插件结合</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> gulpSequence = <span class="built_in">require</span>(<span class="string">'gulp-sequence'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'def'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t1'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'t1'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t2'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'t2'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'t3'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'t3'</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'sequence'</span>, gulpSequence([<span class="string">'t2'</span>,<span class="string">'t1'</span>],<span class="string">'t3'</span>,<span class="string">'default'</span>));</div></pre></td></tr></table></figure><h4 id="cb-与-队列插件-结合使用"><a href="#cb-与-队列插件-结合使用" class="headerlink" title="cb 与 队列插件 结合使用"></a>cb 与 队列插件 结合使用</h4><p>cb 一般写在异步回调函数内。</p><p>关于 cb 自己的理解：就像 JAVA 多线程处理同步的锁一样，只要 task 的回调函数有 cb，这个任务就会在内存中执行，其他任务不会执行，直到 cb( )，才会释放锁，其他的 task 才会继续执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gulp 的任务是控制执行流程，webpack 的任务是处理复杂引用的依赖</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);<span class="comment">// 删除文件和目录</span></div><div class="line"><span class="keyword">var</span> gulpSequence = <span class="built_in">require</span>(<span class="string">'gulp-sequence'</span>);<span class="comment">// 按顺序执行</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);<span class="comment">// 引入 webpack 的本地模块</span></div><div class="line"></div><div class="line"><span class="comment">// 引入 wbpack 的配置文件，webpackConfig 中有 exports</span></div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">"./webpack.publish.config.js"</span>);</div><div class="line"></div><div class="line"><span class="comment">// default 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'sequence'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"项目构建成功"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 流程控制</span></div><div class="line">gulp.task(<span class="string">'sequence'</span>, gulpSequence(<span class="string">'clean'</span>,<span class="string">'webpack'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 删除文件和文件夹</span></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    <span class="comment">//del('dist);   // 如果直接给 dist 的目录，项目启动的顺序还有清除结果会报错，所以要写的更详细一些</span></div><div class="line">    del([<span class="string">'dist/*.js'</span>,<span class="string">'dist/*.css'</span>,<span class="string">'dist/images'</span>,<span class="string">'dist/*.html'</span>]).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        cb();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 写一个任务，在 gulp 中执行 webpack 的构建</span></div><div class="line"><span class="comment">// gulp 负责任务流程部分的操作，webpack 负责复杂模块系统的引用分离工作</span></div><div class="line">gulp.task(<span class="string">'webpack'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    <span class="comment">// 执行 webpack 的构建任务</span></div><div class="line">    webpack(webpackConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"构建任务失败"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            cb();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;扯淡&quot;&gt;&lt;a href=&quot;#扯淡&quot; class=&quot;headerlink&quot; title=&quot;扯淡&quot;&gt;&lt;/a&gt;扯淡&lt;/h3&gt;&lt;p&gt;最近公司项目使用的是 Gulp，之前用过一些，但是该忘的都忘了，自己也懒得去翻以前的笔记，正好博客起了作用（可以鞭策我整理和学习）
      
    
    </summary>
    
      <category term="Gulp" scheme="http://yoursite.com/categories/Gulp/"/>
    
    
      <category term="自动化构建工具" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="http://yoursite.com/2016/05/29/Github/"/>
    <id>http://yoursite.com/2016/05/29/Github/</id>
    <published>2016-05-28T18:32:12.000Z</published>
    <updated>2017-02-04T17:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="SVN-集中式服务器"><a href="#SVN-集中式服务器" class="headerlink" title="SVN 集中式服务器"></a>SVN 集中式服务器</h3><ol><li><p>代码库在集中式服务器中</p></li><li><p>干完活再推送到中央服务器</p></li></ol><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ol><li><p>每人的计算机都有自己代码库</p></li><li><p>实现多人协作</p></li></ol><p>A 人修改 文件1，B 人同事修改 文件1</p><p>A 与 B 两人相互推送就可以看到对方的修改。</p><p>在实际开发中并不会 A 与 B 直接交换。</p><p>通常有一个计算机充当交换的媒介。</p><hr><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><ol><li><p>$ pwd #显示当前目录</p></li><li><p>$ git diff readme.md    #查看当前文件修改了什么内容</p><p> 2.1 $ git status #告诉你有文件被修改过，用 git diff filename 可以查看修改内容</p></li><li><p>$ git log     # 可以查看提交 commit 信息</p><p> 3.1 $git log –pretty=oneline        # 简洁显示 哈希值信息</p></li><li><p>$ git rest –hard HEAD^    # 回退到上一次提交的状态，通过 git log 查看，本次提交的信息被清除了</p></li><li><p>$ git rest –hard 版本ID    # 回退到指定版本ID</p></li><li><p>$ git reflog # 记录每一次命令</p></li><li><p>$ git checkout – readme.md # 把工作区的文件回退到最近一次 add 或者 commit 的状态</p></li><li><p>$ ls -al  # 查看当前目录下的所有文件</p></li><li><p>$ git add -A  // add 全部，-A 换成 * 也可以</p></li></ol><h3 id="提交时的用户信息，并不是-github-帐号"><a href="#提交时的用户信息，并不是-github-帐号" class="headerlink" title="提交时的用户信息，并不是 github 帐号"></a>提交时的用户信息，并不是 github 帐号</h3><p>$ git config –global user.name “yourname”</p><p>$ git config –global user.email “your_email@example.com”</p><p>–global 表示在当前机器所有仓库都使用此配置</p><p>在计算机用户目录下有 .gitconfig 文件，保存这些信息。</p><p>如果不配置用户信息，则无法 commit。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>GIT 只能跟踪文本文件的改动，例如 TXT/HTML/……</p></li><li><p>视频、图片这些二进制文件无法跟踪改动</p></li><li><p>Word 文档也是二进制文件，无法跟踪改动</p></li><li><p>windows 自带笔记本用来保存 UTF-8 文件时，会给每个文件开头默认</p></li></ul><p>添加一个 十六进制 的字符来保存编码格式，建议使用 notepad++</p><ul><li>Git 跟踪并管理的是修改，而非文件。</li></ul><hr><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h4><p>SSH 协议：实现计算机间的安全登录。</p><p>有专门实现 SSH 协议的软件：openssh 软件，实现了 SSH 协议。</p><p>登录命令： ssh  用户名@IP地址</p><h4 id="创建服务器裸仓库"><a href="#创建服务器裸仓库" class="headerlink" title="创建服务器裸仓库"></a>创建服务器裸仓库</h4><p>裸仓库：就是没有工作区的仓库，裸仓库里面的内容就是 .git 文件夹下的文件。</p><p>命令：$ git init –bare</p><h4 id="本机仓库-push-到服务器，push-指定的分支"><a href="#本机仓库-push-到服务器，push-指定的分支" class="headerlink" title="本机仓库 push 到服务器，push 指定的分支"></a>本机仓库 push 到服务器，push 指定的分支</h4><p>命令：$ git  push  用户名:IP:服务器路径  分支</p><p>$ git  push  leehao:192.168.32.02  master</p><p>$ password:</p><h4 id="服务器克隆到本机"><a href="#服务器克隆到本机" class="headerlink" title="服务器克隆到本机"></a>服务器克隆到本机</h4><p>$ git  clone  leehao@192.168.32.02:服务器目录</p><p>$ password:</p><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="分支解释"><a href="#分支解释" class="headerlink" title="分支解释"></a>分支解释</h4><p>git 默认给我们创建了 master 分支。</p><p>命令：$ git branch login    # 创建分支</p><p>$ git checkout -b login        # 创建分支，并且切换分支</p><p>创建新的分支时，最好要切换到主分支在进行创建</p><p>如果在子分支创建分支，子分支可能有 BUG，然后携带到新的分支。</p><p>被创建新的分支后，子分支会继承父分支所有提交的历史。</p><p>在子分支下 通过 git log 可以查看到包括父分支下的所有提交记录。</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>$ git checkout login    # 切换分支后，工作区的代码变成了切换后分支的文件，所以切换分支前，先commit 提交保存。</p><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>$ git merge login    # 在当前主分支下 和并 login 分支</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>$ branch -d 分支名</p><h4 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h4><p>$ git branch</p><h4 id="处理冲突"><a href="#处理冲突" class="headerlink" title="处理冲突"></a>处理冲突</h4><p>两个分支合并后，有可能会有冲突，合并后会有提示文件的冲突位置会变成如下格式：</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><p>冲突代码段 1</p><p>===========</p><p>冲突代码段 2</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; 分支名字</p><p>修改冲突的代码后，commit 即可。</p><hr><h3 id="pull-与-clone-的区别"><a href="#pull-与-clone-的区别" class="headerlink" title="pull 与 clone 的区别"></a>pull 与 clone 的区别</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>都是把远程仓库的代码下载到本地。</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol><li><p>$ git clone 地址，会把 .git 库也下载到本地</p></li><li><p>$ git push 地址 分支，不会下载 .git 文件夹，需要手动 init 本地目录</p></li></ol><h4 id="git-fetch-与-git-pull"><a href="#git-fetch-与-git-pull" class="headerlink" title="git fetch 与 git pull"></a>git fetch 与 git pull</h4><ol><li><p>fetch 获取远程最新版本，不会自动 merge</p></li><li><p>pull 从远程获取代码，并自动 merge，相当于 fetch + merge 操作</p></li><li><p>fetch 更加安全，可以查看文件后再做 Merge 操作</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;SVN-集中式服务器&quot;&gt;&lt;a href=&quot;#SVN-集中式服务器&quot; class=&quot;headerlink&quot; title=&quot;SVN 集中式服务器&quot;&gt;&lt;/a&gt;SVN 集中式服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码库在集中式服务器中&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="http://yoursite.com/2015/10/10/HTTP/"/>
    <id>http://yoursite.com/2015/10/10/HTTP/</id>
    <published>2015-10-10T02:18:07.000Z</published>
    <updated>2017-03-12T00:52:07.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="HTTP-简介"><a href="#HTTP-简介" class="headerlink" title="HTTP 简介"></a>HTTP 简介</h3><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HyperText  Transfer Protocol ( 超文本传输协议 )，是工作在 tcp/ip 协议基础上的，所有的 WWW 文件都必须遵守这个标准。设计 HTTP最初的目的是为了提供一种发布和接收 HTML 页面的方法。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>HTTP 协议是建立在 TCP/IP 协议基础上</li><li>HTTP 协议全称 超文本传输协议</li><li>HTTP 协议 1.0 、1.1 版本，目前通用的是 1.1 版本</li><li>HTTP 1.0 称为短连接会话结束后，就挂断，HTTP 1.1 称为长连接会话结束后，会保留一段时间，所谓长和短，指的是持续时间的长度。</li></ol><h4 id="HTTP-的请求部分"><a href="#HTTP-的请求部分" class="headerlink" title="HTTP 的请求部分"></a>HTTP 的请求部分</h4><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><p>请求行由（请求方式、请求 URL、协议版本构成）</p><p><code>请求行</code> <code>---------</code>  <code>GET</code> <code>/LoginDemo/LoginServlet</code> <code>HTTP/1.1</code></p><p><code>请求头</code> <code>---------</code>  <code>Accept</code> <code>text/html, application/xhtml+xml, */*</code>  </p><p>(空行)</p><p>请求体 内容</p><h5 id="关于请求体"><a href="#关于请求体" class="headerlink" title="关于请求体"></a>关于请求体</h5><p>当以 post 形式提交表单的时候，请求头里会设置 <code>Content-Type: application/x-www-form-urlencoded</code>，以 get 形式不需要设置，直接将数据拼接到 URL 即可。</p><p>只有 post 请求时，才有请求体。如果有请求体，请求体在回车之后。如果没有请求体，也会有 空行 存在。</p><h5 id="详解-HTTP-请求消息头"><a href="#详解-HTTP-请求消息头" class="headerlink" title="详解 HTTP 请求消息头"></a>详解 HTTP 请求消息头</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">1</span>）Accept：text/html,image<span class="comment">/*    </span></div><div class="line"><span class="comment">     [ 告诉服务器，我可以接收，文本，网页，图片 ]</span></div><div class="line"><span class="comment">     现在的浏览器已经不需要此字段了，基本都支持所有的数据类型，历史问题</span></div><div class="line"><span class="comment">2）Accept-Charset：ISO-8859-1</span></div><div class="line"><span class="comment">      [ 接收字符编码 ISO-8859-1 ]</span></div><div class="line"><span class="comment">3）Accept-Encoding：gzip,compress</span></div><div class="line"><span class="comment">      [ 可以接收 gzip,compress 压缩后的数据 ]</span></div><div class="line"><span class="comment">      告诉浏览器我可以接收什么样的压缩格式，节省带宽</span></div><div class="line"><span class="comment">4）Accept-Language：en-us,zh-cn</span></div><div class="line"><span class="comment">      [ 浏览器支持 中，英文 ]</span></div><div class="line"><span class="comment">5）Host：www.sohu.com:80</span></div><div class="line"><span class="comment">      [ 要找的主机是 www.sohu.com:80 ]</span></div><div class="line"><span class="comment">6）If-Modified-Since：Tue,11 Jul 2000 16:16:16</span></div><div class="line"><span class="comment">      [ 告诉服务器，我的缓存中有这个资源文件，该文件的时间是....如上.. </span></div><div class="line"><span class="comment">         如果服务器上的文件有修改，就给我。没修改，就不要给我了。]</span></div><div class="line"><span class="comment">7）Referer：http://www.sowu.com</span></div><div class="line"><span class="comment">      [ 告诉服务器，我来自哪里。该消息头常用于防止盗链 ]</span></div><div class="line"><span class="comment">8）User-Agent：Mozilla/4.0(compat...........)</span></div><div class="line"><span class="comment">      [ 告诉服务器，浏览器内核 ]</span></div><div class="line"><span class="comment">9）Cookie：</span></div><div class="line"><span class="comment">      [ 后续 ]</span></div><div class="line"><span class="comment">10）Connection：close/Keep-Alive</span></div><div class="line"><span class="comment">      [ 保持连接，发完数据后，我不关闭连接 ]</span></div><div class="line"><span class="comment">11）Date：Tue，11 Jul.......</span></div><div class="line"><span class="comment">      [ 浏览器发送该 HTTP 请求的时间 ]</span></div></pre></td></tr></table></figure><hr><h3 id="HTTP-的响应部分"><a href="#HTTP-的响应部分" class="headerlink" title="HTTP 的响应部分"></a>HTTP 的响应部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">基本结构：</div><div class="line">状态行 ------ HTTP/<span class="number">1.1</span>    <span class="number">200</span>    OK</div><div class="line">响应消息头 ------ Server：apache tomcat </div><div class="line">     .......省略.......</div><div class="line">(空行)</div><div class="line">内容 ------</div></pre></td></tr></table></figure><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>格式：HTTP 版本号    状态码    原因叙述</p><p>例子：HTTP/1.1    200    OK</p><p>状态码是用于表示服务器对请求的处理结果，它是一个三位的十进制数。响应状态码分为 5 类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">100</span>~<span class="number">199</span>    表示成功接收请求，要求客户端继续提交</div><div class="line">                  下一次请求才能完成整个处理过程</div><div class="line"><span class="number">200</span>~<span class="number">299</span>    表示成功接收请求并已完成整个处理过程，常见 <span class="number">200</span></div><div class="line"><span class="number">300</span>~<span class="number">399</span>    为完成请求，客户需要进一步细化请求。</div><div class="line">                   例如，请求的资源已经移动一个新地址，常用 <span class="number">302</span></div><div class="line"><span class="number">400</span>~<span class="number">499</span>    客户端请求有错误，常见 <span class="number">404</span></div><div class="line"><span class="number">500</span>~<span class="number">599</span>    服务器端出现错误，常用 <span class="number">500</span></div><div class="line"></div><div class="line">注：每个范围内的所有数字并不是都有含义，例如 <span class="number">100</span>~<span class="number">199</span> 并不是这个区间的状态码全部存在。</div></pre></td></tr></table></figure><p>模拟：302</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">response.setStatus(<span class="number">302</span>);</div><div class="line">response.setHeader(<span class="string">"Location"</span>,<span class="string">"/webapp.servlet"</span>);</div><div class="line">上两行等价于下一行：</div><div class="line">response.sendRedirect(<span class="string">"/webapp.servlet"</span>);</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">响应消息头</div><div class="line"><span class="number">1</span>）Location：http:<span class="comment">//www.baidu.com </span></div><div class="line">    [ 让浏览器重新定位到URL ]</div><div class="line"><span class="number">2</span>）Server：apache tomcat </div><div class="line">    [ 告诉浏览器，我是 Tomcat ]</div><div class="line"><span class="number">3</span>）Content-Encoding：gzip</div><div class="line">    [ 告诉浏览器，这个数据是 gzip 压缩数据 ]</div><div class="line"><span class="number">4</span>）Content-Length：<span class="number">80</span></div><div class="line">    [ 告诉浏览器发送的数据大小是 <span class="number">80</span> 字节 ]</div><div class="line"><span class="number">5</span>）Content-Type：text/html; charset=GB2313</div><div class="line">    [ 内容格式 text/html; 编码gb2312 ]</div><div class="line"><span class="number">6</span>）Content-Language：zh-cn</div><div class="line">    [ 支持中文 ]</div><div class="line"><span class="number">7</span>）Last-Modified：tue,<span class="number">11</span> jul <span class="number">2001</span><span class="number">-2</span><span class="number">-2</span></div><div class="line">    [ 告诉浏览器，该资源上次的更新时间，和缓存比较，如果资源修改了，       </div><div class="line">    及时更新 ]</div><div class="line"><span class="number">8</span>）Refresh：<span class="number">1</span>；url=http:<span class="comment">//www.baidu.com</span></div><div class="line">    [ 过多久，刷新到此 URL 。如果 URL 写自己的页面，就是定时刷新]</div><div class="line"><span class="number">9</span>）Content-Disposition：attachment；filename=aaa.zip</div><div class="line">    [ 告诉浏览器，有文件要下载 ]</div><div class="line">    下载的过程：</div><div class="line">     <span class="number">1.</span> 服务器先读取web应用的资源文件进服务器内存</div><div class="line">     <span class="number">2.</span> 然后在把数据传输给浏览器客户端</div><div class="line"><span class="number">10</span>）Transfer-Encoding：chunked</div><div class="line">     [ 传输编码 ]</div><div class="line"><span class="number">11</span>）SetCookie：ss=Q0; path=<span class="regexp">/search</span></div><div class="line"><span class="regexp">     [ 后续 ]</span></div><div class="line"><span class="regexp">12）Expires：-1      -1 是数字，   response.setDateHeader("Expires",-1) ;</span></div><div class="line"><span class="regexp">       [ 告诉浏览器，如何缓存页面 ]    IE</span></div><div class="line"><span class="regexp">       Cache-Control：no-cache    response.setHeader("Cache-Control","no-cache");</span></div><div class="line"><span class="regexp">       [ 告诉浏览器，如何缓存页面 ]    其他</span></div><div class="line"><span class="regexp">       Pragma：no-cache               response.setHeader("Pragma","no-cache");</span></div><div class="line"><span class="regexp">       [ 告诉浏览器，如何缓存页面 ]    其他</span></div><div class="line"><span class="regexp">13）Connection：close/</span>KeepAlive</div><div class="line">        [ 连接方式，长连接 ]</div><div class="line"><span class="number">14</span>）<span class="built_in">Date</span>：tue，<span class="number">11.</span>......</div><div class="line">        [ 传回来的时间 ]</div></pre></td></tr></table></figure><hr><h3 id="状态码速查表"><a href="#状态码速查表" class="headerlink" title="状态码速查表"></a>状态码速查表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">100</span> Continue 初始的请求已经接受，客户应当继续发送请求的其余部分</div><div class="line"><span class="number">101</span> Switching Protocols 服务器将遵从客户的请求转换到另外一种协议</div><div class="line"><span class="number">200</span> OK 一切正常，对GET和POST请求的应答文档跟在后面。</div><div class="line"><span class="number">201</span> Created 服务器已经创建了文档，Location头给出了它的URL。</div><div class="line"><span class="number">202</span> Accepted 已经接受请求，但处理尚未完成。</div><div class="line"><span class="number">203</span> Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</div><div class="line"><span class="number">204</span> No Content 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的</div><div class="line"><span class="number">205</span> Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</div><div class="line"><span class="number">206</span> Partial Content 客户发送了一个带有Range头的GET请求，服务器完成了它</div><div class="line"><span class="number">300</span> Multiple Choices 客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</div><div class="line"><span class="number">301</span> Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</div><div class="line"><span class="number">302</span> Found 类似于<span class="number">301</span>，但新的URL应该被视为临时性的替代，而不是永久性的。</div><div class="line"><span class="number">303</span> See Other 类似于<span class="number">301</span>/<span class="number">302</span>，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取</div><div class="line"><span class="number">304</span> Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</div><div class="line"><span class="number">305</span> Use <span class="built_in">Proxy</span> 客户请求的文档应该通过Location头所指明的代理服务器提取</div><div class="line"><span class="number">307</span> Temporary Redirect 和<span class="number">302</span>（Found）相同。许多浏览器会错误地响应<span class="number">302</span>应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是<span class="number">303</span>时才能重定向。由于这个原因，HTTP <span class="number">1.1</span>新增了<span class="number">307</span>，以便更加清除地区分几个状态代码：当出现<span class="number">303</span>应答时，浏览器可以跟随重定向的GET和POST请求；如果是<span class="number">307</span>应答，则浏览器只能跟随对GET请求的重定向。</div><div class="line"><span class="number">400</span> Bad Request 请求出现语法错误。</div><div class="line"><span class="number">401</span> Unauthorized 客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求。</div><div class="line"><span class="number">403</span> Forbidden 资源不可用。</div><div class="line"><span class="number">404</span> Not Found 无法找到指定位置的资源</div><div class="line"><span class="number">405</span> Method Not Allowed 请求方法（GET、POST、HEAD、Delete、PUT、TRACE等）对指定的资源不适用。</div><div class="line"><span class="number">406</span> Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容</div><div class="line"><span class="number">407</span> <span class="built_in">Proxy</span> Authentication Required 类似于<span class="number">401</span>，表示客户必须先经过代理服务器的授权。</div><div class="line"><span class="number">408</span> Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。</div><div class="line"><span class="number">409</span> Conflict 通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。</div><div class="line"><span class="number">410</span> Gone 所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和<span class="number">404</span>的不同在于，返回<span class="number">407</span>表示文档永久地离开了指定的位置，而<span class="number">404</span>表示由于未知的原因文档不可用。</div><div class="line"><span class="number">411</span> Length Required 服务器不能处理请求，除非客户发送一个Content-Length头</div><div class="line"><span class="number">412</span> Precondition Failed 请求头中指定的一些前提条件失败</div><div class="line"><span class="number">413</span> Request Entity Too Large 目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头</div><div class="line"><span class="number">414</span> Request URI Too Long URI太长</div><div class="line"><span class="number">416</span> Requested Range Not Satisfiable 服务器不能满足客户在请求中指定的Range头</div><div class="line"><span class="number">500</span> Internal Server <span class="built_in">Error</span> 服务器遇到了意料不到的情况，不能完成客户的请求</div><div class="line"><span class="number">501</span> Not Implemented 服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求</div><div class="line"><span class="number">502</span> Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答</div><div class="line"><span class="number">503</span> Service Unavailable 服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回<span class="number">503</span>。服务器返回<span class="number">503</span>时可以提供一个Retry-After头</div><div class="line"><span class="number">504</span> Gateway Timeout 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</div><div class="line"><span class="number">505</span> HTTP Version Not Supported 服务器不支持请求中所指明的HTTP版本</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;HTTP-简介&quot;&gt;&lt;a href=&quot;#HTTP-简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP 简介&quot;&gt;&lt;/a&gt;HTTP 简介&lt;/h3&gt;&lt;h4 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
